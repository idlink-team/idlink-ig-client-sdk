/*
 * ID LINK
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package idlink.ig.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import idlink.ig.client.model.AdminAddIdentityPoolRequest;
import idlink.ig.client.model.AdminAddIdentityPoolResponse;
import idlink.ig.client.model.AdminDeleteIdentityPoolRequest;
import idlink.ig.client.model.AdminDeleteIdentityPoolResponse;
import idlink.ig.client.model.AdminGenerateNewClientSecretRequest;
import idlink.ig.client.model.AdminGenerateNewClientSecretResponse;
import idlink.ig.client.model.AdminGetClientByPoolIdRequest;
import idlink.ig.client.model.AdminGetClientByPoolIdResponse;
import idlink.ig.client.model.AdminListIdentityPoolsResponse;
import idlink.ig.client.model.AdminResetPoolManagerSecretResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TenantApi {
    private ApiClient apiClient;

    public TenantApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TenantApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for adminAddIdentityPool
     * @param body Add identity pool request (required)
     * @param X_API_TENANT_ID X-API-TENANT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call adminAddIdentityPoolCall(AdminAddIdentityPoolRequest body, String X_API_TENANT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/adminAddIdentityPool";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_API_TENANT_ID != null)
        localVarHeaderParams.put("X-API-TENANT-ID", apiClient.parameterToString(X_API_TENANT_ID));
        if (X_API_TIMESTAMP != null)
        localVarHeaderParams.put("X-API-TIMESTAMP", apiClient.parameterToString(X_API_TIMESTAMP));
        if (X_API_TOKEN != null)
        localVarHeaderParams.put("X-API-TOKEN", apiClient.parameterToString(X_API_TOKEN));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call adminAddIdentityPoolValidateBeforeCall(AdminAddIdentityPoolRequest body, String X_API_TENANT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling adminAddIdentityPool(Async)");
        }
        // verify the required parameter 'X_API_TENANT_ID' is set
        if (X_API_TENANT_ID == null) {
            throw new ApiException("Missing the required parameter 'X_API_TENANT_ID' when calling adminAddIdentityPool(Async)");
        }
        // verify the required parameter 'X_API_TIMESTAMP' is set
        if (X_API_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'X_API_TIMESTAMP' when calling adminAddIdentityPool(Async)");
        }
        // verify the required parameter 'X_API_TOKEN' is set
        if (X_API_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_API_TOKEN' when calling adminAddIdentityPool(Async)");
        }
        
        com.squareup.okhttp.Call call = adminAddIdentityPoolCall(body, X_API_TENANT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add identity pool as an administrator
     * 
     * @param body Add identity pool request (required)
     * @param X_API_TENANT_ID X-API-TENANT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return AdminAddIdentityPoolResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AdminAddIdentityPoolResponse adminAddIdentityPool(AdminAddIdentityPoolRequest body, String X_API_TENANT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        ApiResponse<AdminAddIdentityPoolResponse> resp = adminAddIdentityPoolWithHttpInfo(body, X_API_TENANT_ID, X_API_TIMESTAMP, X_API_TOKEN);
        return resp.getData();
    }

    /**
     * Add identity pool as an administrator
     * 
     * @param body Add identity pool request (required)
     * @param X_API_TENANT_ID X-API-TENANT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return ApiResponse&lt;AdminAddIdentityPoolResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AdminAddIdentityPoolResponse> adminAddIdentityPoolWithHttpInfo(AdminAddIdentityPoolRequest body, String X_API_TENANT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        com.squareup.okhttp.Call call = adminAddIdentityPoolValidateBeforeCall(body, X_API_TENANT_ID, X_API_TIMESTAMP, X_API_TOKEN, null, null);
        Type localVarReturnType = new TypeToken<AdminAddIdentityPoolResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add identity pool as an administrator (asynchronously)
     * 
     * @param body Add identity pool request (required)
     * @param X_API_TENANT_ID X-API-TENANT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminAddIdentityPoolAsync(AdminAddIdentityPoolRequest body, String X_API_TENANT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ApiCallback<AdminAddIdentityPoolResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminAddIdentityPoolValidateBeforeCall(body, X_API_TENANT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AdminAddIdentityPoolResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for adminDeleteIdentityPool
     * @param body Delete identity pool request (required)
     * @param X_API_TENANT_ID X-API-TENANT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call adminDeleteIdentityPoolCall(AdminDeleteIdentityPoolRequest body, String X_API_TENANT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/adminDeleteIdentityPool";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_API_TENANT_ID != null)
        localVarHeaderParams.put("X-API-TENANT-ID", apiClient.parameterToString(X_API_TENANT_ID));
        if (X_API_TIMESTAMP != null)
        localVarHeaderParams.put("X-API-TIMESTAMP", apiClient.parameterToString(X_API_TIMESTAMP));
        if (X_API_TOKEN != null)
        localVarHeaderParams.put("X-API-TOKEN", apiClient.parameterToString(X_API_TOKEN));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call adminDeleteIdentityPoolValidateBeforeCall(AdminDeleteIdentityPoolRequest body, String X_API_TENANT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling adminDeleteIdentityPool(Async)");
        }
        // verify the required parameter 'X_API_TENANT_ID' is set
        if (X_API_TENANT_ID == null) {
            throw new ApiException("Missing the required parameter 'X_API_TENANT_ID' when calling adminDeleteIdentityPool(Async)");
        }
        // verify the required parameter 'X_API_TIMESTAMP' is set
        if (X_API_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'X_API_TIMESTAMP' when calling adminDeleteIdentityPool(Async)");
        }
        // verify the required parameter 'X_API_TOKEN' is set
        if (X_API_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_API_TOKEN' when calling adminDeleteIdentityPool(Async)");
        }
        
        com.squareup.okhttp.Call call = adminDeleteIdentityPoolCall(body, X_API_TENANT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete identity pool as an administrator
     * 
     * @param body Delete identity pool request (required)
     * @param X_API_TENANT_ID X-API-TENANT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return AdminDeleteIdentityPoolResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AdminDeleteIdentityPoolResponse adminDeleteIdentityPool(AdminDeleteIdentityPoolRequest body, String X_API_TENANT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        ApiResponse<AdminDeleteIdentityPoolResponse> resp = adminDeleteIdentityPoolWithHttpInfo(body, X_API_TENANT_ID, X_API_TIMESTAMP, X_API_TOKEN);
        return resp.getData();
    }

    /**
     * Delete identity pool as an administrator
     * 
     * @param body Delete identity pool request (required)
     * @param X_API_TENANT_ID X-API-TENANT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return ApiResponse&lt;AdminDeleteIdentityPoolResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AdminDeleteIdentityPoolResponse> adminDeleteIdentityPoolWithHttpInfo(AdminDeleteIdentityPoolRequest body, String X_API_TENANT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        com.squareup.okhttp.Call call = adminDeleteIdentityPoolValidateBeforeCall(body, X_API_TENANT_ID, X_API_TIMESTAMP, X_API_TOKEN, null, null);
        Type localVarReturnType = new TypeToken<AdminDeleteIdentityPoolResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete identity pool as an administrator (asynchronously)
     * 
     * @param body Delete identity pool request (required)
     * @param X_API_TENANT_ID X-API-TENANT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminDeleteIdentityPoolAsync(AdminDeleteIdentityPoolRequest body, String X_API_TENANT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ApiCallback<AdminDeleteIdentityPoolResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminDeleteIdentityPoolValidateBeforeCall(body, X_API_TENANT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AdminDeleteIdentityPoolResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for adminGenerateNewClientSecret
     * @param body Generate new client secret request (required)
     * @param X_API_TENANT_ID X-API-TENANT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call adminGenerateNewClientSecretCall(AdminGenerateNewClientSecretRequest body, String X_API_TENANT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/adminGenerateNewClientSecret";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_API_TENANT_ID != null)
        localVarHeaderParams.put("X-API-TENANT-ID", apiClient.parameterToString(X_API_TENANT_ID));
        if (X_API_TIMESTAMP != null)
        localVarHeaderParams.put("X-API-TIMESTAMP", apiClient.parameterToString(X_API_TIMESTAMP));
        if (X_API_TOKEN != null)
        localVarHeaderParams.put("X-API-TOKEN", apiClient.parameterToString(X_API_TOKEN));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call adminGenerateNewClientSecretValidateBeforeCall(AdminGenerateNewClientSecretRequest body, String X_API_TENANT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling adminGenerateNewClientSecret(Async)");
        }
        // verify the required parameter 'X_API_TENANT_ID' is set
        if (X_API_TENANT_ID == null) {
            throw new ApiException("Missing the required parameter 'X_API_TENANT_ID' when calling adminGenerateNewClientSecret(Async)");
        }
        // verify the required parameter 'X_API_TIMESTAMP' is set
        if (X_API_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'X_API_TIMESTAMP' when calling adminGenerateNewClientSecret(Async)");
        }
        // verify the required parameter 'X_API_TOKEN' is set
        if (X_API_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_API_TOKEN' when calling adminGenerateNewClientSecret(Async)");
        }
        
        com.squareup.okhttp.Call call = adminGenerateNewClientSecretCall(body, X_API_TENANT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Generate new client secret as an administrator
     * 
     * @param body Generate new client secret request (required)
     * @param X_API_TENANT_ID X-API-TENANT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return AdminGenerateNewClientSecretResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AdminGenerateNewClientSecretResponse adminGenerateNewClientSecret(AdminGenerateNewClientSecretRequest body, String X_API_TENANT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        ApiResponse<AdminGenerateNewClientSecretResponse> resp = adminGenerateNewClientSecretWithHttpInfo(body, X_API_TENANT_ID, X_API_TIMESTAMP, X_API_TOKEN);
        return resp.getData();
    }

    /**
     * Generate new client secret as an administrator
     * 
     * @param body Generate new client secret request (required)
     * @param X_API_TENANT_ID X-API-TENANT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return ApiResponse&lt;AdminGenerateNewClientSecretResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AdminGenerateNewClientSecretResponse> adminGenerateNewClientSecretWithHttpInfo(AdminGenerateNewClientSecretRequest body, String X_API_TENANT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        com.squareup.okhttp.Call call = adminGenerateNewClientSecretValidateBeforeCall(body, X_API_TENANT_ID, X_API_TIMESTAMP, X_API_TOKEN, null, null);
        Type localVarReturnType = new TypeToken<AdminGenerateNewClientSecretResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Generate new client secret as an administrator (asynchronously)
     * 
     * @param body Generate new client secret request (required)
     * @param X_API_TENANT_ID X-API-TENANT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminGenerateNewClientSecretAsync(AdminGenerateNewClientSecretRequest body, String X_API_TENANT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ApiCallback<AdminGenerateNewClientSecretResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminGenerateNewClientSecretValidateBeforeCall(body, X_API_TENANT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AdminGenerateNewClientSecretResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for adminGetClientByPoolId
     * @param body Get pool secret request (required)
     * @param X_API_TENANT_ID X-API-TENANT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call adminGetClientByPoolIdCall(AdminGetClientByPoolIdRequest body, String X_API_TENANT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/adminGetClientByPoolId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_API_TENANT_ID != null)
        localVarHeaderParams.put("X-API-TENANT-ID", apiClient.parameterToString(X_API_TENANT_ID));
        if (X_API_TIMESTAMP != null)
        localVarHeaderParams.put("X-API-TIMESTAMP", apiClient.parameterToString(X_API_TIMESTAMP));
        if (X_API_TOKEN != null)
        localVarHeaderParams.put("X-API-TOKEN", apiClient.parameterToString(X_API_TOKEN));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call adminGetClientByPoolIdValidateBeforeCall(AdminGetClientByPoolIdRequest body, String X_API_TENANT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling adminGetClientByPoolId(Async)");
        }
        // verify the required parameter 'X_API_TENANT_ID' is set
        if (X_API_TENANT_ID == null) {
            throw new ApiException("Missing the required parameter 'X_API_TENANT_ID' when calling adminGetClientByPoolId(Async)");
        }
        // verify the required parameter 'X_API_TIMESTAMP' is set
        if (X_API_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'X_API_TIMESTAMP' when calling adminGetClientByPoolId(Async)");
        }
        // verify the required parameter 'X_API_TOKEN' is set
        if (X_API_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_API_TOKEN' when calling adminGetClientByPoolId(Async)");
        }
        
        com.squareup.okhttp.Call call = adminGetClientByPoolIdCall(body, X_API_TENANT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get pool secret as an administrator
     * 
     * @param body Get pool secret request (required)
     * @param X_API_TENANT_ID X-API-TENANT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return AdminGetClientByPoolIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AdminGetClientByPoolIdResponse adminGetClientByPoolId(AdminGetClientByPoolIdRequest body, String X_API_TENANT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        ApiResponse<AdminGetClientByPoolIdResponse> resp = adminGetClientByPoolIdWithHttpInfo(body, X_API_TENANT_ID, X_API_TIMESTAMP, X_API_TOKEN);
        return resp.getData();
    }

    /**
     * Get pool secret as an administrator
     * 
     * @param body Get pool secret request (required)
     * @param X_API_TENANT_ID X-API-TENANT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return ApiResponse&lt;AdminGetClientByPoolIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AdminGetClientByPoolIdResponse> adminGetClientByPoolIdWithHttpInfo(AdminGetClientByPoolIdRequest body, String X_API_TENANT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        com.squareup.okhttp.Call call = adminGetClientByPoolIdValidateBeforeCall(body, X_API_TENANT_ID, X_API_TIMESTAMP, X_API_TOKEN, null, null);
        Type localVarReturnType = new TypeToken<AdminGetClientByPoolIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get pool secret as an administrator (asynchronously)
     * 
     * @param body Get pool secret request (required)
     * @param X_API_TENANT_ID X-API-TENANT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminGetClientByPoolIdAsync(AdminGetClientByPoolIdRequest body, String X_API_TENANT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ApiCallback<AdminGetClientByPoolIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminGetClientByPoolIdValidateBeforeCall(body, X_API_TENANT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AdminGetClientByPoolIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for adminListIdentityPools
     * @param X_API_TENANT_ID X-API-TENANT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call adminListIdentityPoolsCall(String X_API_TENANT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/adminListIdentityPools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_API_TENANT_ID != null)
        localVarHeaderParams.put("X-API-TENANT-ID", apiClient.parameterToString(X_API_TENANT_ID));
        if (X_API_TIMESTAMP != null)
        localVarHeaderParams.put("X-API-TIMESTAMP", apiClient.parameterToString(X_API_TIMESTAMP));
        if (X_API_TOKEN != null)
        localVarHeaderParams.put("X-API-TOKEN", apiClient.parameterToString(X_API_TOKEN));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call adminListIdentityPoolsValidateBeforeCall(String X_API_TENANT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'X_API_TENANT_ID' is set
        if (X_API_TENANT_ID == null) {
            throw new ApiException("Missing the required parameter 'X_API_TENANT_ID' when calling adminListIdentityPools(Async)");
        }
        // verify the required parameter 'X_API_TIMESTAMP' is set
        if (X_API_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'X_API_TIMESTAMP' when calling adminListIdentityPools(Async)");
        }
        // verify the required parameter 'X_API_TOKEN' is set
        if (X_API_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_API_TOKEN' when calling adminListIdentityPools(Async)");
        }
        
        com.squareup.okhttp.Call call = adminListIdentityPoolsCall(X_API_TENANT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List identity pools as an administrator
     * 
     * @param X_API_TENANT_ID X-API-TENANT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return AdminListIdentityPoolsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AdminListIdentityPoolsResponse adminListIdentityPools(String X_API_TENANT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        ApiResponse<AdminListIdentityPoolsResponse> resp = adminListIdentityPoolsWithHttpInfo(X_API_TENANT_ID, X_API_TIMESTAMP, X_API_TOKEN);
        return resp.getData();
    }

    /**
     * List identity pools as an administrator
     * 
     * @param X_API_TENANT_ID X-API-TENANT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return ApiResponse&lt;AdminListIdentityPoolsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AdminListIdentityPoolsResponse> adminListIdentityPoolsWithHttpInfo(String X_API_TENANT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        com.squareup.okhttp.Call call = adminListIdentityPoolsValidateBeforeCall(X_API_TENANT_ID, X_API_TIMESTAMP, X_API_TOKEN, null, null);
        Type localVarReturnType = new TypeToken<AdminListIdentityPoolsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List identity pools as an administrator (asynchronously)
     * 
     * @param X_API_TENANT_ID X-API-TENANT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminListIdentityPoolsAsync(String X_API_TENANT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ApiCallback<AdminListIdentityPoolsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminListIdentityPoolsValidateBeforeCall(X_API_TENANT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AdminListIdentityPoolsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for adminResetPoolManagerSecret
     * @param X_API_TENANT_ID X-API-TENANT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call adminResetPoolManagerSecretCall(String X_API_TENANT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/adminResetPoolManagerSecret";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_API_TENANT_ID != null)
        localVarHeaderParams.put("X-API-TENANT-ID", apiClient.parameterToString(X_API_TENANT_ID));
        if (X_API_TIMESTAMP != null)
        localVarHeaderParams.put("X-API-TIMESTAMP", apiClient.parameterToString(X_API_TIMESTAMP));
        if (X_API_TOKEN != null)
        localVarHeaderParams.put("X-API-TOKEN", apiClient.parameterToString(X_API_TOKEN));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call adminResetPoolManagerSecretValidateBeforeCall(String X_API_TENANT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'X_API_TENANT_ID' is set
        if (X_API_TENANT_ID == null) {
            throw new ApiException("Missing the required parameter 'X_API_TENANT_ID' when calling adminResetPoolManagerSecret(Async)");
        }
        // verify the required parameter 'X_API_TIMESTAMP' is set
        if (X_API_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'X_API_TIMESTAMP' when calling adminResetPoolManagerSecret(Async)");
        }
        // verify the required parameter 'X_API_TOKEN' is set
        if (X_API_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_API_TOKEN' when calling adminResetPoolManagerSecret(Async)");
        }
        
        com.squareup.okhttp.Call call = adminResetPoolManagerSecretCall(X_API_TENANT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Reset pool manager secret as an administrator
     * 
     * @param X_API_TENANT_ID X-API-TENANT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return AdminResetPoolManagerSecretResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AdminResetPoolManagerSecretResponse adminResetPoolManagerSecret(String X_API_TENANT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        ApiResponse<AdminResetPoolManagerSecretResponse> resp = adminResetPoolManagerSecretWithHttpInfo(X_API_TENANT_ID, X_API_TIMESTAMP, X_API_TOKEN);
        return resp.getData();
    }

    /**
     * Reset pool manager secret as an administrator
     * 
     * @param X_API_TENANT_ID X-API-TENANT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return ApiResponse&lt;AdminResetPoolManagerSecretResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AdminResetPoolManagerSecretResponse> adminResetPoolManagerSecretWithHttpInfo(String X_API_TENANT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        com.squareup.okhttp.Call call = adminResetPoolManagerSecretValidateBeforeCall(X_API_TENANT_ID, X_API_TIMESTAMP, X_API_TOKEN, null, null);
        Type localVarReturnType = new TypeToken<AdminResetPoolManagerSecretResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Reset pool manager secret as an administrator (asynchronously)
     * 
     * @param X_API_TENANT_ID X-API-TENANT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminResetPoolManagerSecretAsync(String X_API_TENANT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ApiCallback<AdminResetPoolManagerSecretResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminResetPoolManagerSecretValidateBeforeCall(X_API_TENANT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AdminResetPoolManagerSecretResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
