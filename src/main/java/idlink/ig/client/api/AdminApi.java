/*
 * ID LINK
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package idlink.ig.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import idlink.ig.client.model.AdminAddUserAttributeRequest;
import idlink.ig.client.model.AdminAddUserAttributeResponse;
import idlink.ig.client.model.AdminChangePasswordRequest;
import idlink.ig.client.model.AdminChangePasswordResponse;
import idlink.ig.client.model.AdminCheckUserRequest;
import idlink.ig.client.model.AdminCheckUserResponse;
import idlink.ig.client.model.AdminCreateUserRequest;
import idlink.ig.client.model.AdminCreateUserResponse;
import idlink.ig.client.model.AdminDeleteUserAttributeRequest;
import idlink.ig.client.model.AdminDeleteUserAttributeResponse;
import idlink.ig.client.model.AdminDeleteUserRequest;
import idlink.ig.client.model.AdminDeleteUserResponse;
import idlink.ig.client.model.AdminDisableUserRequest;
import idlink.ig.client.model.AdminDisableUserResponse;
import idlink.ig.client.model.AdminEnableUserRequest;
import idlink.ig.client.model.AdminEnableUserResponse;
import idlink.ig.client.model.AdminInitialLoginRequest;
import idlink.ig.client.model.AdminListUserAttributesRequest;
import idlink.ig.client.model.AdminListUserAttributesResponse;
import idlink.ig.client.model.AdminUpdateUserRequest;
import idlink.ig.client.model.AdminUpdateUserResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AdminApi {
    private ApiClient apiClient;

    public AdminApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AdminApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for adminAddUserAttribute
     * @param body User to add attribute (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call adminAddUserAttributeCall(AdminAddUserAttributeRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/adminAddUserAttribute";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_API_CLIENT_ID != null)
        localVarHeaderParams.put("X-API-CLIENT-ID", apiClient.parameterToString(X_API_CLIENT_ID));
        if (X_API_TIMESTAMP != null)
        localVarHeaderParams.put("X-API-TIMESTAMP", apiClient.parameterToString(X_API_TIMESTAMP));
        if (X_API_TOKEN != null)
        localVarHeaderParams.put("X-API-TOKEN", apiClient.parameterToString(X_API_TOKEN));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call adminAddUserAttributeValidateBeforeCall(AdminAddUserAttributeRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling adminAddUserAttribute(Async)");
        }
        // verify the required parameter 'X_API_CLIENT_ID' is set
        if (X_API_CLIENT_ID == null) {
            throw new ApiException("Missing the required parameter 'X_API_CLIENT_ID' when calling adminAddUserAttribute(Async)");
        }
        // verify the required parameter 'X_API_TIMESTAMP' is set
        if (X_API_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'X_API_TIMESTAMP' when calling adminAddUserAttribute(Async)");
        }
        // verify the required parameter 'X_API_TOKEN' is set
        if (X_API_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_API_TOKEN' when calling adminAddUserAttribute(Async)");
        }
        
        com.squareup.okhttp.Call call = adminAddUserAttributeCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add the attribute for a user type as an administrator
     * 
     * @param body User to add attribute (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return AdminAddUserAttributeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AdminAddUserAttributeResponse adminAddUserAttribute(AdminAddUserAttributeRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        ApiResponse<AdminAddUserAttributeResponse> resp = adminAddUserAttributeWithHttpInfo(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN);
        return resp.getData();
    }

    /**
     * Add the attribute for a user type as an administrator
     * 
     * @param body User to add attribute (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return ApiResponse&lt;AdminAddUserAttributeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AdminAddUserAttributeResponse> adminAddUserAttributeWithHttpInfo(AdminAddUserAttributeRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        com.squareup.okhttp.Call call = adminAddUserAttributeValidateBeforeCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, null, null);
        Type localVarReturnType = new TypeToken<AdminAddUserAttributeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add the attribute for a user type as an administrator (asynchronously)
     * 
     * @param body User to add attribute (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminAddUserAttributeAsync(AdminAddUserAttributeRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ApiCallback<AdminAddUserAttributeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminAddUserAttributeValidateBeforeCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AdminAddUserAttributeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for adminChangePassword
     * @param body User to change password (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call adminChangePasswordCall(AdminChangePasswordRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/adminChangePassword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_API_CLIENT_ID != null)
        localVarHeaderParams.put("X-API-CLIENT-ID", apiClient.parameterToString(X_API_CLIENT_ID));
        if (X_API_TIMESTAMP != null)
        localVarHeaderParams.put("X-API-TIMESTAMP", apiClient.parameterToString(X_API_TIMESTAMP));
        if (X_API_TOKEN != null)
        localVarHeaderParams.put("X-API-TOKEN", apiClient.parameterToString(X_API_TOKEN));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call adminChangePasswordValidateBeforeCall(AdminChangePasswordRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling adminChangePassword(Async)");
        }
        // verify the required parameter 'X_API_CLIENT_ID' is set
        if (X_API_CLIENT_ID == null) {
            throw new ApiException("Missing the required parameter 'X_API_CLIENT_ID' when calling adminChangePassword(Async)");
        }
        // verify the required parameter 'X_API_TIMESTAMP' is set
        if (X_API_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'X_API_TIMESTAMP' when calling adminChangePassword(Async)");
        }
        // verify the required parameter 'X_API_TOKEN' is set
        if (X_API_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_API_TOKEN' when calling adminChangePassword(Async)");
        }
        
        com.squareup.okhttp.Call call = adminChangePasswordCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Changes a user&#x27;s password as an administrator
     * 
     * @param body User to change password (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return AdminChangePasswordResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AdminChangePasswordResponse adminChangePassword(AdminChangePasswordRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        ApiResponse<AdminChangePasswordResponse> resp = adminChangePasswordWithHttpInfo(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN);
        return resp.getData();
    }

    /**
     * Changes a user&#x27;s password as an administrator
     * 
     * @param body User to change password (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return ApiResponse&lt;AdminChangePasswordResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AdminChangePasswordResponse> adminChangePasswordWithHttpInfo(AdminChangePasswordRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        com.squareup.okhttp.Call call = adminChangePasswordValidateBeforeCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, null, null);
        Type localVarReturnType = new TypeToken<AdminChangePasswordResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Changes a user&#x27;s password as an administrator (asynchronously)
     * 
     * @param body User to change password (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminChangePasswordAsync(AdminChangePasswordRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ApiCallback<AdminChangePasswordResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminChangePasswordValidateBeforeCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AdminChangePasswordResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for adminCheckUserExist
     * @param body User to check exist (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call adminCheckUserExistCall(AdminCheckUserRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/adminCheckUserExist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_API_CLIENT_ID != null)
        localVarHeaderParams.put("X-API-CLIENT-ID", apiClient.parameterToString(X_API_CLIENT_ID));
        if (X_API_TIMESTAMP != null)
        localVarHeaderParams.put("X-API-TIMESTAMP", apiClient.parameterToString(X_API_TIMESTAMP));
        if (X_API_TOKEN != null)
        localVarHeaderParams.put("X-API-TOKEN", apiClient.parameterToString(X_API_TOKEN));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call adminCheckUserExistValidateBeforeCall(AdminCheckUserRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling adminCheckUserExist(Async)");
        }
        // verify the required parameter 'X_API_CLIENT_ID' is set
        if (X_API_CLIENT_ID == null) {
            throw new ApiException("Missing the required parameter 'X_API_CLIENT_ID' when calling adminCheckUserExist(Async)");
        }
        // verify the required parameter 'X_API_TIMESTAMP' is set
        if (X_API_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'X_API_TIMESTAMP' when calling adminCheckUserExist(Async)");
        }
        // verify the required parameter 'X_API_TOKEN' is set
        if (X_API_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_API_TOKEN' when calling adminCheckUserExist(Async)");
        }
        
        com.squareup.okhttp.Call call = adminCheckUserExistCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Check whether the user exists as an administrator
     * When the user can be confirmed according to the condition map, return true, else return false
     * @param body User to check exist (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return AdminCheckUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AdminCheckUserResponse adminCheckUserExist(AdminCheckUserRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        ApiResponse<AdminCheckUserResponse> resp = adminCheckUserExistWithHttpInfo(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN);
        return resp.getData();
    }

    /**
     * Check whether the user exists as an administrator
     * When the user can be confirmed according to the condition map, return true, else return false
     * @param body User to check exist (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return ApiResponse&lt;AdminCheckUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AdminCheckUserResponse> adminCheckUserExistWithHttpInfo(AdminCheckUserRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        com.squareup.okhttp.Call call = adminCheckUserExistValidateBeforeCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, null, null);
        Type localVarReturnType = new TypeToken<AdminCheckUserResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check whether the user exists as an administrator (asynchronously)
     * When the user can be confirmed according to the condition map, return true, else return false
     * @param body User to check exist (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminCheckUserExistAsync(AdminCheckUserRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ApiCallback<AdminCheckUserResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminCheckUserExistValidateBeforeCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AdminCheckUserResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for adminCreateUser
     * @param body User to create (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call adminCreateUserCall(AdminCreateUserRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/adminCreateUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_API_CLIENT_ID != null)
        localVarHeaderParams.put("X-API-CLIENT-ID", apiClient.parameterToString(X_API_CLIENT_ID));
        if (X_API_TIMESTAMP != null)
        localVarHeaderParams.put("X-API-TIMESTAMP", apiClient.parameterToString(X_API_TIMESTAMP));
        if (X_API_TOKEN != null)
        localVarHeaderParams.put("X-API-TOKEN", apiClient.parameterToString(X_API_TOKEN));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call adminCreateUserValidateBeforeCall(AdminCreateUserRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling adminCreateUser(Async)");
        }
        // verify the required parameter 'X_API_CLIENT_ID' is set
        if (X_API_CLIENT_ID == null) {
            throw new ApiException("Missing the required parameter 'X_API_CLIENT_ID' when calling adminCreateUser(Async)");
        }
        // verify the required parameter 'X_API_TIMESTAMP' is set
        if (X_API_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'X_API_TIMESTAMP' when calling adminCreateUser(Async)");
        }
        // verify the required parameter 'X_API_TOKEN' is set
        if (X_API_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_API_TOKEN' when calling adminCreateUser(Async)");
        }
        
        com.squareup.okhttp.Call call = adminCreateUserCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a new User as an administrator
     * 
     * @param body User to create (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return AdminCreateUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AdminCreateUserResponse adminCreateUser(AdminCreateUserRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        ApiResponse<AdminCreateUserResponse> resp = adminCreateUserWithHttpInfo(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN);
        return resp.getData();
    }

    /**
     * Creates a new User as an administrator
     * 
     * @param body User to create (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return ApiResponse&lt;AdminCreateUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AdminCreateUserResponse> adminCreateUserWithHttpInfo(AdminCreateUserRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        com.squareup.okhttp.Call call = adminCreateUserValidateBeforeCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, null, null);
        Type localVarReturnType = new TypeToken<AdminCreateUserResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new User as an administrator (asynchronously)
     * 
     * @param body User to create (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminCreateUserAsync(AdminCreateUserRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ApiCallback<AdminCreateUserResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminCreateUserValidateBeforeCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AdminCreateUserResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for adminDeleteUser
     * @param body User to delete (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call adminDeleteUserCall(AdminDeleteUserRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/adminDeleteUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_API_CLIENT_ID != null)
        localVarHeaderParams.put("X-API-CLIENT-ID", apiClient.parameterToString(X_API_CLIENT_ID));
        if (X_API_TIMESTAMP != null)
        localVarHeaderParams.put("X-API-TIMESTAMP", apiClient.parameterToString(X_API_TIMESTAMP));
        if (X_API_TOKEN != null)
        localVarHeaderParams.put("X-API-TOKEN", apiClient.parameterToString(X_API_TOKEN));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call adminDeleteUserValidateBeforeCall(AdminDeleteUserRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling adminDeleteUser(Async)");
        }
        // verify the required parameter 'X_API_CLIENT_ID' is set
        if (X_API_CLIENT_ID == null) {
            throw new ApiException("Missing the required parameter 'X_API_CLIENT_ID' when calling adminDeleteUser(Async)");
        }
        // verify the required parameter 'X_API_TIMESTAMP' is set
        if (X_API_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'X_API_TIMESTAMP' when calling adminDeleteUser(Async)");
        }
        // verify the required parameter 'X_API_TOKEN' is set
        if (X_API_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_API_TOKEN' when calling adminDeleteUser(Async)");
        }
        
        com.squareup.okhttp.Call call = adminDeleteUserCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a user as an administrator
     * 
     * @param body User to delete (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return AdminDeleteUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AdminDeleteUserResponse adminDeleteUser(AdminDeleteUserRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        ApiResponse<AdminDeleteUserResponse> resp = adminDeleteUserWithHttpInfo(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN);
        return resp.getData();
    }

    /**
     * Deletes a user as an administrator
     * 
     * @param body User to delete (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return ApiResponse&lt;AdminDeleteUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AdminDeleteUserResponse> adminDeleteUserWithHttpInfo(AdminDeleteUserRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        com.squareup.okhttp.Call call = adminDeleteUserValidateBeforeCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, null, null);
        Type localVarReturnType = new TypeToken<AdminDeleteUserResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes a user as an administrator (asynchronously)
     * 
     * @param body User to delete (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminDeleteUserAsync(AdminDeleteUserRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ApiCallback<AdminDeleteUserResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminDeleteUserValidateBeforeCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AdminDeleteUserResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for adminDeleteUserAttribute
     * @param body User to delete attribute (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call adminDeleteUserAttributeCall(AdminDeleteUserAttributeRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/adminDeleteUserAttribute";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_API_CLIENT_ID != null)
        localVarHeaderParams.put("X-API-CLIENT-ID", apiClient.parameterToString(X_API_CLIENT_ID));
        if (X_API_TIMESTAMP != null)
        localVarHeaderParams.put("X-API-TIMESTAMP", apiClient.parameterToString(X_API_TIMESTAMP));
        if (X_API_TOKEN != null)
        localVarHeaderParams.put("X-API-TOKEN", apiClient.parameterToString(X_API_TOKEN));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call adminDeleteUserAttributeValidateBeforeCall(AdminDeleteUserAttributeRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling adminDeleteUserAttribute(Async)");
        }
        // verify the required parameter 'X_API_CLIENT_ID' is set
        if (X_API_CLIENT_ID == null) {
            throw new ApiException("Missing the required parameter 'X_API_CLIENT_ID' when calling adminDeleteUserAttribute(Async)");
        }
        // verify the required parameter 'X_API_TIMESTAMP' is set
        if (X_API_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'X_API_TIMESTAMP' when calling adminDeleteUserAttribute(Async)");
        }
        // verify the required parameter 'X_API_TOKEN' is set
        if (X_API_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_API_TOKEN' when calling adminDeleteUserAttribute(Async)");
        }
        
        com.squareup.okhttp.Call call = adminDeleteUserAttributeCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes the attribute from a user type as an administrator
     * 
     * @param body User to delete attribute (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return AdminDeleteUserAttributeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AdminDeleteUserAttributeResponse adminDeleteUserAttribute(AdminDeleteUserAttributeRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        ApiResponse<AdminDeleteUserAttributeResponse> resp = adminDeleteUserAttributeWithHttpInfo(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN);
        return resp.getData();
    }

    /**
     * Deletes the attribute from a user type as an administrator
     * 
     * @param body User to delete attribute (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return ApiResponse&lt;AdminDeleteUserAttributeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AdminDeleteUserAttributeResponse> adminDeleteUserAttributeWithHttpInfo(AdminDeleteUserAttributeRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        com.squareup.okhttp.Call call = adminDeleteUserAttributeValidateBeforeCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, null, null);
        Type localVarReturnType = new TypeToken<AdminDeleteUserAttributeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes the attribute from a user type as an administrator (asynchronously)
     * 
     * @param body User to delete attribute (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminDeleteUserAttributeAsync(AdminDeleteUserAttributeRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ApiCallback<AdminDeleteUserAttributeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminDeleteUserAttributeValidateBeforeCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AdminDeleteUserAttributeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for adminDisableUser
     * @param body User to disable (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call adminDisableUserCall(AdminDisableUserRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/adminDisableUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_API_CLIENT_ID != null)
        localVarHeaderParams.put("X-API-CLIENT-ID", apiClient.parameterToString(X_API_CLIENT_ID));
        if (X_API_TIMESTAMP != null)
        localVarHeaderParams.put("X-API-TIMESTAMP", apiClient.parameterToString(X_API_TIMESTAMP));
        if (X_API_TOKEN != null)
        localVarHeaderParams.put("X-API-TOKEN", apiClient.parameterToString(X_API_TOKEN));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call adminDisableUserValidateBeforeCall(AdminDisableUserRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling adminDisableUser(Async)");
        }
        // verify the required parameter 'X_API_CLIENT_ID' is set
        if (X_API_CLIENT_ID == null) {
            throw new ApiException("Missing the required parameter 'X_API_CLIENT_ID' when calling adminDisableUser(Async)");
        }
        // verify the required parameter 'X_API_TIMESTAMP' is set
        if (X_API_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'X_API_TIMESTAMP' when calling adminDisableUser(Async)");
        }
        // verify the required parameter 'X_API_TOKEN' is set
        if (X_API_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_API_TOKEN' when calling adminDisableUser(Async)");
        }
        
        com.squareup.okhttp.Call call = adminDisableUserCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Disables a user as an administrator
     * 
     * @param body User to disable (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return AdminDisableUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AdminDisableUserResponse adminDisableUser(AdminDisableUserRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        ApiResponse<AdminDisableUserResponse> resp = adminDisableUserWithHttpInfo(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN);
        return resp.getData();
    }

    /**
     * Disables a user as an administrator
     * 
     * @param body User to disable (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return ApiResponse&lt;AdminDisableUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AdminDisableUserResponse> adminDisableUserWithHttpInfo(AdminDisableUserRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        com.squareup.okhttp.Call call = adminDisableUserValidateBeforeCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, null, null);
        Type localVarReturnType = new TypeToken<AdminDisableUserResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Disables a user as an administrator (asynchronously)
     * 
     * @param body User to disable (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminDisableUserAsync(AdminDisableUserRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ApiCallback<AdminDisableUserResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminDisableUserValidateBeforeCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AdminDisableUserResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for adminEnableUser
     * @param body User to enable (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call adminEnableUserCall(AdminEnableUserRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/adminEnableUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_API_CLIENT_ID != null)
        localVarHeaderParams.put("X-API-CLIENT-ID", apiClient.parameterToString(X_API_CLIENT_ID));
        if (X_API_TIMESTAMP != null)
        localVarHeaderParams.put("X-API-TIMESTAMP", apiClient.parameterToString(X_API_TIMESTAMP));
        if (X_API_TOKEN != null)
        localVarHeaderParams.put("X-API-TOKEN", apiClient.parameterToString(X_API_TOKEN));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call adminEnableUserValidateBeforeCall(AdminEnableUserRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling adminEnableUser(Async)");
        }
        // verify the required parameter 'X_API_CLIENT_ID' is set
        if (X_API_CLIENT_ID == null) {
            throw new ApiException("Missing the required parameter 'X_API_CLIENT_ID' when calling adminEnableUser(Async)");
        }
        // verify the required parameter 'X_API_TIMESTAMP' is set
        if (X_API_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'X_API_TIMESTAMP' when calling adminEnableUser(Async)");
        }
        // verify the required parameter 'X_API_TOKEN' is set
        if (X_API_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_API_TOKEN' when calling adminEnableUser(Async)");
        }
        
        com.squareup.okhttp.Call call = adminEnableUserCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Enables a user as an administrator
     * 
     * @param body User to enable (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return AdminEnableUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AdminEnableUserResponse adminEnableUser(AdminEnableUserRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        ApiResponse<AdminEnableUserResponse> resp = adminEnableUserWithHttpInfo(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN);
        return resp.getData();
    }

    /**
     * Enables a user as an administrator
     * 
     * @param body User to enable (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return ApiResponse&lt;AdminEnableUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AdminEnableUserResponse> adminEnableUserWithHttpInfo(AdminEnableUserRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        com.squareup.okhttp.Call call = adminEnableUserValidateBeforeCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, null, null);
        Type localVarReturnType = new TypeToken<AdminEnableUserResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Enables a user as an administrator (asynchronously)
     * 
     * @param body User to enable (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminEnableUserAsync(AdminEnableUserRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ApiCallback<AdminEnableUserResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminEnableUserValidateBeforeCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AdminEnableUserResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for adminInitialLogin
     * @param body User to login (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call adminInitialLoginCall(AdminInitialLoginRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/adminInitialLogin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_API_CLIENT_ID != null)
        localVarHeaderParams.put("X-API-CLIENT-ID", apiClient.parameterToString(X_API_CLIENT_ID));
        if (X_API_TIMESTAMP != null)
        localVarHeaderParams.put("X-API-TIMESTAMP", apiClient.parameterToString(X_API_TIMESTAMP));
        if (X_API_TOKEN != null)
        localVarHeaderParams.put("X-API-TOKEN", apiClient.parameterToString(X_API_TOKEN));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call adminInitialLoginValidateBeforeCall(AdminInitialLoginRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling adminInitialLogin(Async)");
        }
        // verify the required parameter 'X_API_CLIENT_ID' is set
        if (X_API_CLIENT_ID == null) {
            throw new ApiException("Missing the required parameter 'X_API_CLIENT_ID' when calling adminInitialLogin(Async)");
        }
        // verify the required parameter 'X_API_TIMESTAMP' is set
        if (X_API_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'X_API_TIMESTAMP' when calling adminInitialLogin(Async)");
        }
        // verify the required parameter 'X_API_TOKEN' is set
        if (X_API_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_API_TOKEN' when calling adminInitialLogin(Async)");
        }
        
        com.squareup.okhttp.Call call = adminInitialLoginCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Log in and return the tokens as an administrator
     * 
     * @param body User to login (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String adminInitialLogin(AdminInitialLoginRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        ApiResponse<String> resp = adminInitialLoginWithHttpInfo(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN);
        return resp.getData();
    }

    /**
     * Log in and return the tokens as an administrator
     * 
     * @param body User to login (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> adminInitialLoginWithHttpInfo(AdminInitialLoginRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        com.squareup.okhttp.Call call = adminInitialLoginValidateBeforeCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Log in and return the tokens as an administrator (asynchronously)
     * 
     * @param body User to login (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminInitialLoginAsync(AdminInitialLoginRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminInitialLoginValidateBeforeCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for adminListUserAttributes
     * @param body User to list attributes (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call adminListUserAttributesCall(AdminListUserAttributesRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/adminListUserAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_API_CLIENT_ID != null)
        localVarHeaderParams.put("X-API-CLIENT-ID", apiClient.parameterToString(X_API_CLIENT_ID));
        if (X_API_TIMESTAMP != null)
        localVarHeaderParams.put("X-API-TIMESTAMP", apiClient.parameterToString(X_API_TIMESTAMP));
        if (X_API_TOKEN != null)
        localVarHeaderParams.put("X-API-TOKEN", apiClient.parameterToString(X_API_TOKEN));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call adminListUserAttributesValidateBeforeCall(AdminListUserAttributesRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling adminListUserAttributes(Async)");
        }
        // verify the required parameter 'X_API_CLIENT_ID' is set
        if (X_API_CLIENT_ID == null) {
            throw new ApiException("Missing the required parameter 'X_API_CLIENT_ID' when calling adminListUserAttributes(Async)");
        }
        // verify the required parameter 'X_API_TIMESTAMP' is set
        if (X_API_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'X_API_TIMESTAMP' when calling adminListUserAttributes(Async)");
        }
        // verify the required parameter 'X_API_TOKEN' is set
        if (X_API_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_API_TOKEN' when calling adminListUserAttributes(Async)");
        }
        
        com.squareup.okhttp.Call call = adminListUserAttributesCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List the attribute from a user type as an administrator
     * 
     * @param body User to list attributes (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return AdminListUserAttributesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AdminListUserAttributesResponse adminListUserAttributes(AdminListUserAttributesRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        ApiResponse<AdminListUserAttributesResponse> resp = adminListUserAttributesWithHttpInfo(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN);
        return resp.getData();
    }

    /**
     * List the attribute from a user type as an administrator
     * 
     * @param body User to list attributes (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return ApiResponse&lt;AdminListUserAttributesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AdminListUserAttributesResponse> adminListUserAttributesWithHttpInfo(AdminListUserAttributesRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        com.squareup.okhttp.Call call = adminListUserAttributesValidateBeforeCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, null, null);
        Type localVarReturnType = new TypeToken<AdminListUserAttributesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List the attribute from a user type as an administrator (asynchronously)
     * 
     * @param body User to list attributes (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminListUserAttributesAsync(AdminListUserAttributesRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ApiCallback<AdminListUserAttributesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminListUserAttributesValidateBeforeCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AdminListUserAttributesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for adminUpdateUser
     * @param body User to update (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call adminUpdateUserCall(AdminUpdateUserRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/adminUpdateUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_API_CLIENT_ID != null)
        localVarHeaderParams.put("X-API-CLIENT-ID", apiClient.parameterToString(X_API_CLIENT_ID));
        if (X_API_TIMESTAMP != null)
        localVarHeaderParams.put("X-API-TIMESTAMP", apiClient.parameterToString(X_API_TIMESTAMP));
        if (X_API_TOKEN != null)
        localVarHeaderParams.put("X-API-TOKEN", apiClient.parameterToString(X_API_TOKEN));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call adminUpdateUserValidateBeforeCall(AdminUpdateUserRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling adminUpdateUser(Async)");
        }
        // verify the required parameter 'X_API_CLIENT_ID' is set
        if (X_API_CLIENT_ID == null) {
            throw new ApiException("Missing the required parameter 'X_API_CLIENT_ID' when calling adminUpdateUser(Async)");
        }
        // verify the required parameter 'X_API_TIMESTAMP' is set
        if (X_API_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'X_API_TIMESTAMP' when calling adminUpdateUser(Async)");
        }
        // verify the required parameter 'X_API_TOKEN' is set
        if (X_API_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_API_TOKEN' when calling adminUpdateUser(Async)");
        }
        
        com.squareup.okhttp.Call call = adminUpdateUserCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates the attribute of a User as an administrator
     * 
     * @param body User to update (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return AdminUpdateUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AdminUpdateUserResponse adminUpdateUser(AdminUpdateUserRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        ApiResponse<AdminUpdateUserResponse> resp = adminUpdateUserWithHttpInfo(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN);
        return resp.getData();
    }

    /**
     * Updates the attribute of a User as an administrator
     * 
     * @param body User to update (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @return ApiResponse&lt;AdminUpdateUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AdminUpdateUserResponse> adminUpdateUserWithHttpInfo(AdminUpdateUserRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN) throws ApiException {
        com.squareup.okhttp.Call call = adminUpdateUserValidateBeforeCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, null, null);
        Type localVarReturnType = new TypeToken<AdminUpdateUserResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates the attribute of a User as an administrator (asynchronously)
     * 
     * @param body User to update (required)
     * @param X_API_CLIENT_ID X-API-CLIENT-ID, Get form ID.LINK team. (required)
     * @param X_API_TIMESTAMP X-API-TIMESTAMP, The timestamp of calling this api (required)
     * @param X_API_TOKEN X-API-TOKEN, Generate it by AdminClientTool (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminUpdateUserAsync(AdminUpdateUserRequest body, String X_API_CLIENT_ID, Long X_API_TIMESTAMP, String X_API_TOKEN, final ApiCallback<AdminUpdateUserResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminUpdateUserValidateBeforeCall(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AdminUpdateUserResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
