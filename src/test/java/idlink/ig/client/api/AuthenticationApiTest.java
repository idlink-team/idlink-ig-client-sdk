/*
 * ID LINK
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package idlink.ig.client.api;

import io.swagger.client.ApiException;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthenticationApi
 */
@Ignore
public class AuthenticationApiTest {

    private final AuthenticationApi api = new AuthenticationApi();

    /**
     * oauth2 device&#x27;s token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deviceLoginTest() throws ApiException {
        String authorization = null;
        String grantType = null;
        String password = null;
        String refreshToken = null;
        String scope = null;
        String username = null;
        String response = api.deviceLogin(authorization, grantType, password, refreshToken, scope, username);

        // TODO: test validations
    }
    /**
     * jwt list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jwkListTest() throws ApiException {
        Map<String, Object> response = api.jwkList();

        // TODO: test validations
    }
    /**
     * oauth2 userInfo
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void oauth2UserInfoTest() throws ApiException {
        String authorization = null;
        String response = api.oauth2UserInfo(authorization);

        // TODO: test validations
    }
    /**
     * openid configuration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void openidConfigurationTest() throws ApiException {
        Object response = api.openidConfiguration();

        // TODO: test validations
    }
    /**
     * oauth2 user&#x27;s token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personLoginTest() throws ApiException {
        String authorization = null;
        String grantType = null;
        String password = null;
        String refreshToken = null;
        String scope = null;
        String username = null;
        String response = api.personLogin(authorization, grantType, password, refreshToken, scope, username);

        // TODO: test validations
    }
    /**
     * verify access_token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyAccessTokenTest() throws ApiException {
        String authorization = null;
        String token = null;
        Boolean response = api.verifyAccessToken(authorization, token);

        // TODO: test validations
    }
    /**
     * verify jwt token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyJWTTest() throws ApiException {
        String authorization = null;
        String token = null;
        Boolean response = api.verifyJWT(authorization, token);

        // TODO: test validations
    }
}
