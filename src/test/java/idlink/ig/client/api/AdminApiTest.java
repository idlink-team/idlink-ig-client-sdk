/*
 * ID LINK
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package idlink.ig.client.api;

import io.swagger.client.ApiException;
import idlink.ig.client.model.AdminAddUserAttributeRequest;
import idlink.ig.client.model.AdminAddUserAttributeResponse;
import idlink.ig.client.model.AdminChangePasswordRequest;
import idlink.ig.client.model.AdminChangePasswordResponse;
import idlink.ig.client.model.AdminCheckUserRequest;
import idlink.ig.client.model.AdminCheckUserResponse;
import idlink.ig.client.model.AdminCreateUserRequest;
import idlink.ig.client.model.AdminCreateUserResponse;
import idlink.ig.client.model.AdminDeleteUserAttributeRequest;
import idlink.ig.client.model.AdminDeleteUserAttributeResponse;
import idlink.ig.client.model.AdminDeleteUserRequest;
import idlink.ig.client.model.AdminDeleteUserResponse;
import idlink.ig.client.model.AdminDisableUserRequest;
import idlink.ig.client.model.AdminDisableUserResponse;
import idlink.ig.client.model.AdminEnableUserRequest;
import idlink.ig.client.model.AdminEnableUserResponse;
import idlink.ig.client.model.AdminInitialLoginRequest;
import idlink.ig.client.model.AdminListUserAttributesRequest;
import idlink.ig.client.model.AdminListUserAttributesResponse;
import idlink.ig.client.model.AdminUpdateUserRequest;
import idlink.ig.client.model.AdminUpdateUserResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AdminApi
 */
@Ignore
public class AdminApiTest {

    private final AdminApi api = new AdminApi();

    /**
     * Add the attribute for a user type as an administrator
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminAddUserAttributeTest() throws ApiException {
        AdminAddUserAttributeRequest body = null;
        String X_API_CLIENT_ID = null;
        Long X_API_TIMESTAMP = null;
        String X_API_TOKEN = null;
        AdminAddUserAttributeResponse response = api.adminAddUserAttribute(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN);

        // TODO: test validations
    }
    /**
     * Changes a user&#x27;s password as an administrator
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminChangePasswordTest() throws ApiException {
        AdminChangePasswordRequest body = null;
        String X_API_CLIENT_ID = null;
        Long X_API_TIMESTAMP = null;
        String X_API_TOKEN = null;
        AdminChangePasswordResponse response = api.adminChangePassword(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN);

        // TODO: test validations
    }
    /**
     * Check whether the user exists as an administrator
     *
     * When the user can be confirmed according to the condition map, return true, else return false
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminCheckUserExistTest() throws ApiException {
        AdminCheckUserRequest body = null;
        String X_API_CLIENT_ID = null;
        Long X_API_TIMESTAMP = null;
        String X_API_TOKEN = null;
        AdminCheckUserResponse response = api.adminCheckUserExist(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN);

        // TODO: test validations
    }
    /**
     * Creates a new User as an administrator
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminCreateUserTest() throws ApiException {
        AdminCreateUserRequest body = null;
        String X_API_CLIENT_ID = null;
        Long X_API_TIMESTAMP = null;
        String X_API_TOKEN = null;
        AdminCreateUserResponse response = api.adminCreateUser(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN);

        // TODO: test validations
    }
    /**
     * Deletes a user as an administrator
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminDeleteUserTest() throws ApiException {
        AdminDeleteUserRequest body = null;
        String X_API_CLIENT_ID = null;
        Long X_API_TIMESTAMP = null;
        String X_API_TOKEN = null;
        AdminDeleteUserResponse response = api.adminDeleteUser(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN);

        // TODO: test validations
    }
    /**
     * Deletes the attribute from a user type as an administrator
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminDeleteUserAttributeTest() throws ApiException {
        AdminDeleteUserAttributeRequest body = null;
        String X_API_CLIENT_ID = null;
        Long X_API_TIMESTAMP = null;
        String X_API_TOKEN = null;
        AdminDeleteUserAttributeResponse response = api.adminDeleteUserAttribute(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN);

        // TODO: test validations
    }
    /**
     * Disables a user as an administrator
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminDisableUserTest() throws ApiException {
        AdminDisableUserRequest body = null;
        String X_API_CLIENT_ID = null;
        Long X_API_TIMESTAMP = null;
        String X_API_TOKEN = null;
        AdminDisableUserResponse response = api.adminDisableUser(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN);

        // TODO: test validations
    }
    /**
     * Enables a user as an administrator
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminEnableUserTest() throws ApiException {
        AdminEnableUserRequest body = null;
        String X_API_CLIENT_ID = null;
        Long X_API_TIMESTAMP = null;
        String X_API_TOKEN = null;
        AdminEnableUserResponse response = api.adminEnableUser(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN);

        // TODO: test validations
    }
    /**
     * Log in and return the tokens as an administrator
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminInitialLoginTest() throws ApiException {
        AdminInitialLoginRequest body = null;
        String X_API_CLIENT_ID = null;
        Long X_API_TIMESTAMP = null;
        String X_API_TOKEN = null;
        String response = api.adminInitialLogin(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN);

        // TODO: test validations
    }
    /**
     * List the attribute from a user type as an administrator
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminListUserAttributesTest() throws ApiException {
        AdminListUserAttributesRequest body = null;
        String X_API_CLIENT_ID = null;
        Long X_API_TIMESTAMP = null;
        String X_API_TOKEN = null;
        AdminListUserAttributesResponse response = api.adminListUserAttributes(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN);

        // TODO: test validations
    }
    /**
     * Updates the attribute of a User as an administrator
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminUpdateUserTest() throws ApiException {
        AdminUpdateUserRequest body = null;
        String X_API_CLIENT_ID = null;
        Long X_API_TIMESTAMP = null;
        String X_API_TOKEN = null;
        AdminUpdateUserResponse response = api.adminUpdateUser(body, X_API_CLIENT_ID, X_API_TIMESTAMP, X_API_TOKEN);

        // TODO: test validations
    }
}
